generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                             String                    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name                           String                    @db.VarChar(255)
  email                          String                    @db.VarChar(255)
  phone_number                   String?                   @db.VarChar(20)
  password_hash                  String?                   @db.VarChar(255)
  created_at                     DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at                     DateTime?                 @default(now()) @db.Timestamp(0)
  user_type                      user_user_type            @default(MEDIATOR)
  active                         Boolean                   @default(true)
  google_token                   String?                   @db.LongText
  city                           String?                   @db.VarChar(100)
  state                          String?                   @db.VarChar(100)
  pincode                        String?                   @db.Char(6)
  is_self_signed_up              Boolean                   @default(false)
  llb_college                    String?                   @db.VarChar(255)
  llb_university                 String?                   @db.VarChar(255)
  llb_year                       Int?                      @default(0)
  mediator_course_year           Int?                      @default(0)
  mcpc_certificate_url           String?                   @db.VarChar(255)
  preferred_area_of_practice     String?                   @db.LongText
  selected_hearing_types         String?                   @db.LongText
  bar_enrollment_no              String?                   @db.VarChar(255)
  preferred_languages            String?                   @db.LongText
  llb_certificate_url            String?                   @db.VarChar(255)
  profile_picture_url            String?                   @db.VarChar(255)
  working_day_of_week            user_working_day_of_week?
  unique_email_for_non_clients   String?                   @unique(map: "unique_non_client_email") @db.VarChar(255)
  blogs                          blogs[]
  cases_cases_judgeTouser        cases[]                   @relation("cases_judgeTouser")
  cases_cases_first_partyTouser  cases[]                   @relation("cases_first_partyTouser")
  cases_cases_second_partyTouser cases[]                   @relation("cases_second_partyTouser")
  cases_cases_mediatorTouser     cases[]                   @relation("cases_mediatorTouser")
  events                         events[]
  notes                          notes[]
  notifications                  notifications[]
  signature_tracking             signature_tracking[]
  transactions                   transactions[]
}

model cases {
  id                            String                   @id @default(dbgenerated("(uuid())")) @db.Char(36)
  created_at                    DateTime?                @default(now()) @db.Timestamp(0)
  updated_at                    DateTime?                @default(now()) @db.Timestamp(0)
  mediator                      String?                  @db.Char(36)
  first_party                   String?                  @db.Char(36)
  second_party                  String?                  @db.Char(36)
  caseId                        String?                  @db.Char(50)
  judge_document_url            String?                  @db.VarChar(255)
  nature_of_suit                String?                  @db.Text
  stage                         String?                  @db.VarChar(100)
  case_type                     String?                  @db.VarChar(255)
  status                        String?                  @db.VarChar(255)
  sub_status                    String?                  @db.VarChar(255)
  hearing_date                  DateTime?                @db.Date
  institution_date              DateTime?                @db.Date
  mediation_date_time           DateTime?                @db.DateTime(0)
  referral_judge_signature      String?                  @db.Text
  plaintiff_signature           String?                  @db.Text
  plaintiff_phone               String?                  @db.VarChar(15)
  plaintiff_advocate            String?                  @db.Text
  respondent_signature          String?                  @db.Text
  respondent_phone              String?                  @db.Text
  respondent_advocate           String?                  @db.Text
  judge                         String?                  @db.Char(36)
  suit_no                       String?                  @db.Text
  hearing_count                 Int?
  case_agreement                String?                  @db.Char(36)
  plaintiff_advocate_email      String?                  @db.Text
  respondent_advocate_email     String?                  @db.Text
  case_history                  case_history[]
  case_agreement_tracking       case_agreement_tracking? @relation(fields: [case_agreement], references: [id], map: "fk_case_agreement_tracking")
  user_cases_judgeTouser        user?                    @relation("cases_judgeTouser", fields: [judge], references: [id], map: "fk_judge")
  case_statuses                 case_statuses?           @relation(fields: [status], references: [id], onDelete: Cascade, map: "fk_cases_status")
  case_sub_statuses             case_sub_statuses?       @relation(fields: [sub_status], references: [id], onDelete: Cascade, map: "fk_cases_sub_status")
  user_cases_first_partyTouser  user?                    @relation("cases_first_partyTouser", fields: [first_party], references: [id], onUpdate: Restrict, map: "fk_client_1")
  user_cases_second_partyTouser user?                    @relation("cases_second_partyTouser", fields: [second_party], references: [id], onUpdate: Restrict, map: "fk_client_2")
  user_cases_mediatorTouser     user?                    @relation("cases_mediatorTouser", fields: [mediator], references: [id], onUpdate: Restrict, map: "fk_mediator")
  events                        events[]
  signature_tracking            signature_tracking[]
  transactions                  transactions[]

  @@index([mediator], map: "fk_mediator")
  @@index([first_party], map: "fk_first_party")
  @@index([second_party], map: "fk_second_party")
  @@index([status], map: "fk_cases_status")
  @@index([sub_status], map: "fk_cases_sub_status")
  @@index([case_agreement], map: "fk_case_agreement_tracking")
  @@index([judge], map: "fk_cases_judge_user")
}

model caseIdTracker {
  id         Int @id @default(autoincrement())
  lastCaseId Int
}

model events {
  id                                                      String          @id @default(dbgenerated("(uuid())")) @db.Char(36)
  title                                                   String          @db.VarChar(255)
  description                                             String?         @db.Text
  start_datetime                                          DateTime        @db.DateTime(0)
  end_datetime                                            DateTime        @db.DateTime(0)
  type                                                    events_type?
  meeting_link                                            String?         @db.VarChar(255)
  google_calendar_link                                    String?         @db.VarChar(255)
  created_by                                              String?         @db.Char(36)
  case_id                                                 String?         @db.Char(36)
  created_at                                              DateTime?       @default(now()) @db.Timestamp(0)
  updated_at                                              DateTime?       @default(now()) @db.Timestamp(0)
  event_feedback_id                                       String?         @db.Char(36)
  cases                                                   cases?          @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_case_id")
  user                                                    user?           @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_created_by")
  event_feedback_events_event_feedback_idToevent_feedback event_feedback? @relation("events_event_feedback_idToevent_feedback", fields: [event_feedback_id], references: [id], onDelete: Restrict, map: "fk_events_event_feedback")

  @@index([case_id], map: "fk_case_id")
  @@index([created_by], map: "fk_created_by")
  @@index([event_feedback_id], map: "fk_events_event_feedback")
}

model otp_resets {
  email      String?         @db.VarChar(255)
  otp        Int?
  created_at DateTime?       @default(now()) @db.Timestamp(0)
  expires_at DateTime        @db.Timestamp(0)
  type       otp_resets_type
  id         String          @id @default(dbgenerated("(uuid())")) @db.Char(36)

  @@unique([email, type], name: "unique_email_type", map: "unique_email_type")
}

model available_languages {
  id       String @id @db.VarChar(20)
  language String @db.VarChar(100)
}

model notes {
  id        String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  user_id   String    @db.Char(36)
  note_text String    @db.Text
  created   DateTime? @default(now()) @db.DateTime(0)
  updated   DateTime? @default(now()) @db.DateTime(0)
  user      user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id")

  @@index([user_id], map: "fk_user_id")
}

model transactions {
  transaction_id   String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  payment_id       String    @db.VarChar(255)
  client_id        String    @db.Char(36)
  case_id          String    @db.Char(36)
  success          Boolean
  amount           Decimal   @db.Decimal(10, 2)
  currency         String?   @default("USD") @db.VarChar(10)
  reason           String?   @db.VarChar(255)
  payment_method   String?   @db.VarChar(50)
  reference_id     String?   @db.VarChar(255)
  transaction_date DateTime? @default(now()) @db.DateTime(0)
  created_at       DateTime? @default(now()) @db.DateTime(0)
  updated_at       DateTime? @default(now()) @db.DateTime(0)
  cases            cases     @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_transactions_case_id")
  user             user      @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_transactions_user_id")

  @@index([case_id], map: "fk_transactions_case_id")
  @@index([client_id], map: "fk_transactions_user_id")
}

model blog_categories {
  blog_id     String     @db.Char(36)
  category_id String     @db.Char(36)
  blogs       blogs      @relation(fields: [blog_id], references: [id], onUpdate: Restrict, map: "blog_categories_ibfk_1")
  categories  categories @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "blog_categories_ibfk_2")

  @@id([blog_id, category_id])
  @@index([category_id], map: "category_id")
}

model blog_tags {
  blog_id String @db.Char(36)
  tag_id  String @db.Char(36)
  blogs   blogs  @relation(fields: [blog_id], references: [id], onUpdate: Restrict, map: "blog_tags_ibfk_1")
  tags    tags   @relation(fields: [tag_id], references: [id], onUpdate: Restrict, map: "blog_tags_ibfk_2")

  @@id([blog_id, tag_id])
  @@index([tag_id], map: "tag_id")
}

model blogs {
  id              String            @id @default(dbgenerated("(uuid())")) @db.Char(36)
  title           String            @db.VarChar(255)
  content         String            @db.Text
  author_id       String            @db.Char(36)
  created_at      DateTime?         @default(now()) @db.DateTime(0)
  updated_at      DateTime?         @default(now()) @db.DateTime(0)
  status          blogs_status      @default(Draft)
  blog_categories blog_categories[]
  blog_tags       blog_tags[]
  user            user              @relation(fields: [author_id], references: [id], onUpdate: Restrict, map: "fk_author_id")

  @@index([author_id], map: "fk_author_id")
}

model categories {
  id              String            @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name            String            @unique(map: "name") @db.VarChar(100)
  blog_categories blog_categories[]
}

model tags {
  id        String      @id @default(dbgenerated("(uuid())")) @db.Char(36)
  name      String      @unique(map: "name") @db.VarChar(50)
  blog_tags blog_tags[]
}

model case_history {
  id            String      @id @default(dbgenerated("(uuid())")) @db.Char(36)
  case_id       String      @db.Char(36)
  created_at    DateTime?   @default(now()) @db.DateTime(0)
  case_event_id String      @db.VarChar(36)
  cases         cases       @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_case_history_case")
  case_events   case_events @relation(fields: [case_event_id], references: [id], onDelete: Cascade, map: "fk_case_history_event")

  @@index([case_id], map: "fk_case_history_case")
  @@index([case_event_id], map: "fk_case_history_event")
}

model notifications {
  id          String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  user_id     String    @db.Char(36)
  title       String    @db.VarChar(255)
  description String    @db.Text
  created_at  DateTime? @default(now()) @db.DateTime(0)
  is_read     Boolean?  @default(false)
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_notifications_user")

  @@index([user_id], map: "fk_notifications_user")
}

model case_events {
  id                String            @id @default(dbgenerated("(uuid())")) @db.VarChar(36)
  status_id         String            @db.VarChar(255)
  sub_status_id     String            @db.VarChar(255)
  title             String            @db.VarChar(255)
  description       String            @db.Text
  sequence          Int               @unique(map: "sequence")
  created_at        DateTime?         @default(now()) @db.DateTime(0)
  case_statuses     case_statuses     @relation(fields: [status_id], references: [id], onDelete: Cascade, map: "fk_case_events_status")
  case_sub_statuses case_sub_statuses @relation(fields: [sub_status_id], references: [id], onDelete: Cascade, map: "fk_case_events_sub_status")
  case_history      case_history[]

  @@index([status_id], map: "fk_case_events_status")
  @@index([sub_status_id], map: "fk_case_events_sub_status")
}

model case_statuses {
  id                String              @id @db.VarChar(255)
  name              String              @unique(map: "name") @db.VarChar(100)
  case_events       case_events[]
  case_sub_statuses case_sub_statuses[]
  cases             cases[]
}

model case_sub_statuses {
  id            String        @id @db.VarChar(255)
  status_id     String        @db.VarChar(255)
  name          String        @unique(map: "name") @db.VarChar(100)
  case_events   case_events[]
  case_statuses case_statuses @relation(fields: [status_id], references: [id], onDelete: Cascade, map: "fk_case_sub_statuses_status")
  cases         cases[]

  @@index([status_id], map: "fk_case_sub_statuses_status")
}

model signature_tracking {
  id                      String                   @id @default(dbgenerated("(uuid())")) @db.Char(36)
  user_id                 String                   @db.Char(36)
  case_id                 String?                  @db.Char(36)
  signed                  Boolean?                 @default(false)
  signature_expiry        DateTime                 @db.DateTime(0)
  created_at              DateTime?                @default(now()) @db.DateTime(0)
  updated_at              DateTime?                @default(now()) @db.DateTime(0)
  case_agreement_id       String?                  @db.Char(36)
  case_agreement_tracking case_agreement_tracking? @relation(fields: [case_agreement_id], references: [id], map: "fk_case_agreement")
  cases                   cases?                   @relation(fields: [case_id], references: [id], onDelete: Cascade, map: "fk_signature_case")
  user                    user                     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_signature_user")

  @@index([case_id], map: "fk_signature_case")
  @@index([user_id], map: "fk_signature_user")
  @@index([case_agreement_id], map: "fk_case_agreement")
}

model event_feedback {
  id                                              String    @id @default(dbgenerated("(uuid())")) @db.Char(36)
  first_party_present                             Boolean?  @default(false)
  second_party_present                            Boolean?  @default(false)
  summary_of_meeting                              String?   @db.Text
  created_at                                      DateTime? @default(now()) @db.Timestamp(0)
  updated_at                                      DateTime? @default(now()) @db.Timestamp(0)
  events_events_event_feedback_idToevent_feedback events[]  @relation("events_event_feedback_idToevent_feedback")
}

model case_agreement_tracking {
  id                       String               @id @default(dbgenerated("(uuid())")) @db.Char(36)
  agreed_terms             String?              @db.Text
  signature_mediator       String?              @db.LongText
  first_party_signature    String?              @db.LongText
  second_party_signature   String?              @db.LongText
  created_at               DateTime             @default(now()) @db.Timestamp(0)
  updated_at               DateTime             @default(now()) @db.Timestamp(0)
  mediation_agreement_link String?              @db.Text
  cases                    cases[]
  signature_tracking       signature_tracking[]
}

enum blogs_status {
  Draft
  Published
}

enum user_user_type {
  ADMIN
  MEDIATOR
  MC
  JUDGE
  CLIENT
}

enum user_working_day_of_week {
  Monday
  Tuesday
  Thursday
  Friday
  Saturday
  Sunday
  Wednesday
}

enum events_type {
  ROUSE
  PERSONAL
}

enum otp_resets_type {
  MEDIATION
  RESET_PASSWORD
}
